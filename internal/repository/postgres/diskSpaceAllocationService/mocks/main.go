// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go
//
// Generated by this command:
//
//	mockgen -source ./main.go -destination ./mocks/main.go
//

// Package mock_diskSpaceAllocationService is a generated GoMock package.
package mock_diskSpaceAllocationService

import (
	context "context"
	reflect "reflect"

	models "github.com/fixelti/family-hub/internal/common/models"
	gomock "go.uber.org/mock/gomock"
)

// MockDiskSpaceAllocationServiceRepository is a mock of DiskSpaceAllocationServiceRepository interface.
type MockDiskSpaceAllocationServiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDiskSpaceAllocationServiceRepositoryMockRecorder
}

// MockDiskSpaceAllocationServiceRepositoryMockRecorder is the mock recorder for MockDiskSpaceAllocationServiceRepository.
type MockDiskSpaceAllocationServiceRepositoryMockRecorder struct {
	mock *MockDiskSpaceAllocationServiceRepository
}

// NewMockDiskSpaceAllocationServiceRepository creates a new mock instance.
func NewMockDiskSpaceAllocationServiceRepository(ctrl *gomock.Controller) *MockDiskSpaceAllocationServiceRepository {
	mock := &MockDiskSpaceAllocationServiceRepository{ctrl: ctrl}
	mock.recorder = &MockDiskSpaceAllocationServiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiskSpaceAllocationServiceRepository) EXPECT() *MockDiskSpaceAllocationServiceRepositoryMockRecorder {
	return m.recorder
}

// GetUserServices mocks base method.
func (m *MockDiskSpaceAllocationServiceRepository) GetUserServices(ctx context.Context, userID uint) ([]models.DiskSpaceAllocationService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserServices", ctx, userID)
	ret0, _ := ret[0].([]models.DiskSpaceAllocationService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserServices indicates an expected call of GetUserServices.
func (mr *MockDiskSpaceAllocationServiceRepositoryMockRecorder) GetUserServices(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserServices", reflect.TypeOf((*MockDiskSpaceAllocationServiceRepository)(nil).GetUserServices), ctx, userID)
}
