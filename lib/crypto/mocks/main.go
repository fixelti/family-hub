// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go
//
// Generated by this command:
//
//	mockgen -source ./main.go -destination ./mocks/main.go
//

// Package mock_crypto is a generated GoMock package.
package mock_crypto

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCrypto is a mock of Crypto interface.
type MockCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoMockRecorder
}

// MockCryptoMockRecorder is the mock recorder for MockCrypto.
type MockCryptoMockRecorder struct {
	mock *MockCrypto
}

// NewMockCrypto creates a new mock instance.
func NewMockCrypto(ctrl *gomock.Controller) *MockCrypto {
	mock := &MockCrypto{ctrl: ctrl}
	mock.recorder = &MockCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrypto) EXPECT() *MockCryptoMockRecorder {
	return m.recorder
}

// CompareHashAndPassword mocks base method.
func (m *MockCrypto) CompareHashAndPassword(hashedPassword, password []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHashAndPassword", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareHashAndPassword indicates an expected call of CompareHashAndPassword.
func (mr *MockCryptoMockRecorder) CompareHashAndPassword(hashedPassword, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHashAndPassword", reflect.TypeOf((*MockCrypto)(nil).CompareHashAndPassword), hashedPassword, password)
}

// GenerateFromPassword mocks base method.
func (m *MockCrypto) GenerateFromPassword(password []byte, cost int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFromPassword", password, cost)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateFromPassword indicates an expected call of GenerateFromPassword.
func (mr *MockCryptoMockRecorder) GenerateFromPassword(password, cost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFromPassword", reflect.TypeOf((*MockCrypto)(nil).GenerateFromPassword), password, cost)
}
